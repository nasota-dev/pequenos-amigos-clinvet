// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collaborator {
  id         String       @id @default(uuid())
  name       String
  cpf        Int          @unique
  dateBirth  DateTime
  telephone  String       @unique
  email      String       @unique
  address    String
  login      String       @unique
  password   String
  role       String
  crmv       String?      @unique
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  services   Service[]
  scheduling Scheduling[]
  Sell       Sell?

  @@map("collaborator")
}

model Tutor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  name      String
  cpf       String   @unique
  dateBirth DateTime
  telephone String   @unique
  email     String?  @unique
  address   String
  pets      Pet[]

  @@map("tutor")
}

model Pet {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  species        String
  race           String
  identifier     Boolean
  typeIdentifier String?
  codeIdentifier String?
  vaccines       Json
  tutorId        String   @unique
  tutor          Tutor    @relation(fields: [tutorId], references: [id])

  @@map("pet")
}

model Service {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  resume         String
  description    String
  type           String
  collaboratorId String       @unique
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  @@map("service")
}

model Scheduling {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  when           DateTime
  resume         String
  description    String
  status         String
  services       Json
  collaboratorId String       @unique
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  @@map("scheduling")
}

model Sell {
  id             String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  products       Json
  total          Float
  discount       Float
  finalValue     Float
  collaboratorId String       @unique
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])

  @@map("sell")
}

model Product {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  description String
  unitValue   Float
  type        Boolean

  @@map("products")
}
